/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Issue } from "./Issue";
import { IssueCountArgs } from "./IssueCountArgs";
import { IssueFindManyArgs } from "./IssueFindManyArgs";
import { IssueFindUniqueArgs } from "./IssueFindUniqueArgs";
import { CreateIssueArgs } from "./CreateIssueArgs";
import { UpdateIssueArgs } from "./UpdateIssueArgs";
import { DeleteIssueArgs } from "./DeleteIssueArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { Project } from "../../project/base/Project";
import { User } from "../../user/base/User";
import { IssueService } from "../issue.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Issue)
export class IssueResolverBase {
  constructor(
    protected readonly service: IssueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "read",
    possession: "any",
  })
  async _issuesMeta(
    @graphql.Args() args: IssueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Issue])
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "read",
    possession: "any",
  })
  async issues(@graphql.Args() args: IssueFindManyArgs): Promise<Issue[]> {
    return this.service.issues(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Issue, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "read",
    possession: "own",
  })
  async issue(
    @graphql.Args() args: IssueFindUniqueArgs
  ): Promise<Issue | null> {
    const result = await this.service.issue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Issue)
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "create",
    possession: "any",
  })
  async createIssue(@graphql.Args() args: CreateIssueArgs): Promise<Issue> {
    return await this.service.createIssue({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Issue)
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "update",
    possession: "any",
  })
  async updateIssue(
    @graphql.Args() args: UpdateIssueArgs
  ): Promise<Issue | null> {
    try {
      return await this.service.updateIssue({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Issue)
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "delete",
    possession: "any",
  })
  async deleteIssue(
    @graphql.Args() args: DeleteIssueArgs
  ): Promise<Issue | null> {
    try {
      return await this.service.deleteIssue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Comment], { name: "comments" })
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async findComments(
    @graphql.Parent() parent: Issue,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async getProject(@graphql.Parent() parent: Issue): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Issue): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
